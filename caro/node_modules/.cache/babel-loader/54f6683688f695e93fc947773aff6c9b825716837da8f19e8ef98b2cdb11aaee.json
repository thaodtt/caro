{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitadm\\\\Documents\\\\htmls\\\\caro\\\\caro\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport Square from \"./Square\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const m = 15,\n    n = 20;\n  const numConsecutiveToWin = 5;\n  const [squares, setSquares] = useState(Array(m * n).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [latestPos, setLatestPos] = useState(null);\n  const winner = calculateWinner();\n  function handleClick(i) {\n    if (squares[i] || winner) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setLatestPos(i);\n  }\n  function posToRowCol(pos) {\n    return [parseInt(pos / n), pos % n];\n  }\n  function rowColToPos(row, col) {\n    return row * n + col;\n  }\n  function calculateWinner() {\n    const [row, col] = posToRowCol(latestPos);\n    const latestSymbol = xIsNext ? \"O\" : \"X\";\n    console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\n\n    // check vertical\n    var upper = row,\n      lower = row;\n    console.log(`at first, upper=${upper}, lower=${lower}`);\n    while (squares[rowColToPos(upper, col)] === latestSymbol) {\n      upper--;\n      if (upper < 0) {\n        break;\n      }\n    }\n    while (squares[rowColToPos(lower, col)] === latestSymbol) {\n      lower++;\n      if (lower >= m) {\n        break;\n      }\n    }\n    console.log(`after the while loop, upper=${upper}, lower=${lower}`);\n    if (lower - upper - 1 >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n\n    // check horizontal\n    var left = col,\n      right = col;\n    while (squares[rowColToPos(row, left)] === latestSymbol) {\n      left--;\n      if (left < 0) {\n        break;\n      }\n    }\n    while (squares[rowColToPos(row, right)] === latestSymbol) {\n      right++;\n      if (right >= n) {\n        break;\n      }\n    }\n    if (right - left - 1 >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n\n    // checking up right diagonal        \n    left = col;\n    right = col;\n    while (squares[rowColToPos(row - col + left, left)] === latestSymbol) {\n      left--;\n      if (left < 0 | row - col + left >= m) {\n        break;\n      }\n    }\n    while (squares[rowColToPos(row - col + right, right)] === latestSymbol) {\n      right++;\n      if (right >= n | row - col + right <= 0) {\n        break;\n      }\n    }\n    if (right - left - 1 >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n\n    // checking up left diagonal        \n    left = col;\n    right = col;\n    while (squares[rowColToPos(row + col - left, left)] === latestSymbol) {\n      left--;\n      if (left < 0 | row + col - left <= 0) {\n        break;\n      }\n    }\n    while (squares[rowColToPos(row + col - right, right)] === latestSymbol) {\n      right++;\n      if (right >= n | row + col - right >= m) {\n        break;\n      }\n    }\n    if (right - left - 1 >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n    return null;\n  }\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  const board = [];\n  for (let row = 0; row < m; row++) {\n    let board_row = [];\n    for (let col = 0; col < n; col++) {\n      board_row.push( /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[row * n + col],\n        onSquareClick: () => handleClick(row * n + col)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 28\n      }, this));\n    }\n    board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: board_row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 20\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Caro chess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Rule: each player alternates, whoever gets to 5 in a row, or column or diagonal first wins.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [status, \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), board]\n  }, void 0, true);\n}\n_s(Board, \"lqEJu6JOKvNtPrgS0sBvsOLxlJI=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Square","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","m","n","numConsecutiveToWin","squares","setSquares","Array","fill","xIsNext","setXIsNext","latestPos","setLatestPos","winner","calculateWinner","handleClick","i","nextSquares","slice","posToRowCol","pos","parseInt","rowColToPos","row","col","latestSymbol","console","log","upper","lower","left","right","status","board","board_row","push","value","onSquareClick","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/mitadm/Documents/htmls/caro/caro/src/Board.js"],"sourcesContent":["import Square from \"./Square\";\r\nimport { useState } from 'react';\r\n\r\nexport default function Board() {\r\n    const m=15, n=20;\r\n    const numConsecutiveToWin=5;\r\n    const [squares, setSquares] = useState(Array(m*n).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [latestPos, setLatestPos] = useState(null);\r\n\r\n    const winner = calculateWinner();\r\n\r\n    function handleClick(i) {\r\n      if (squares[i] || winner) {\r\n        return;\r\n      }\r\n      const nextSquares = squares.slice();\r\n      if (xIsNext) {\r\n        nextSquares[i] = \"X\";\r\n      } else {\r\n        nextSquares[i] = \"O\";\r\n      }\r\n      setSquares(nextSquares);\r\n      setXIsNext(!xIsNext);\r\n      setLatestPos(i);\r\n    }\r\n    function posToRowCol(pos){\r\n        return [parseInt(pos/n), pos %n];\r\n    }\r\n    function rowColToPos(row, col){\r\n        return row*n+col;\r\n    }\r\n    function calculateWinner(){\r\n        const [row, col] = posToRowCol(latestPos);\r\n        const latestSymbol = xIsNext? \"O\": \"X\";\r\n        console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\r\n\r\n        // check vertical\r\n        var upper=row, lower=row;\r\n        console.log(`at first, upper=${upper}, lower=${lower}`);\r\n        while ((squares[rowColToPos(upper, col)]===latestSymbol)) {\r\n            upper--;\r\n            if (upper<0){break;}\r\n        }\r\n        while ((squares[rowColToPos(lower, col)]===latestSymbol)) {\r\n            lower++;\r\n            if (lower>=m){break;}\r\n        }\r\n        console.log(`after the while loop, upper=${upper}, lower=${lower}`);\r\n        if (lower - upper - 1>=numConsecutiveToWin){return latestSymbol;}\r\n\r\n        // check horizontal\r\n        var left=col, right=col;\r\n        while ((squares[rowColToPos(row, left)]===latestSymbol)) {\r\n            left--;\r\n            if (left<0){break;}\r\n        }\r\n        while ((squares[rowColToPos(row, right)]===latestSymbol)) {\r\n            right++;\r\n            if (right>=n){break;}\r\n        }\r\n        if (right - left - 1>=numConsecutiveToWin){return latestSymbol;}\r\n\r\n        // checking up right diagonal        \r\n        left=col;\r\n        right=col;\r\n        while ((squares[rowColToPos(row-col+left, left)]===latestSymbol)) {\r\n            left--;\r\n            if ((left<0)|(row-col+left)>=m){break;}\r\n        }\r\n        while ((squares[rowColToPos(row-col+right, right)]===latestSymbol)) {\r\n            right++;\r\n            if ((right>=n)|(row-col+right<=0)){break;}\r\n        }\r\n        if (right - left - 1>=numConsecutiveToWin){return latestSymbol;}\r\n        \r\n        // checking up left diagonal        \r\n        left=col;\r\n        right=col;\r\n        while ((squares[rowColToPos(row+col-left, left)]===latestSymbol)) {\r\n            left--;\r\n            if ((left<0)|(row+col-left<=0)){break;}\r\n        }\r\n        while ((squares[rowColToPos(row+col-right, right)]===latestSymbol)) {\r\n            right++;\r\n            if ((right>=n)|(row+col-right>=m)){break;}\r\n        }\r\n        if (right - left - 1>=numConsecutiveToWin){return latestSymbol;}\r\n        return null;\r\n    }\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    const board = []\r\n    for (let row = 0; row < m; row ++) {\r\n        let board_row = [];\r\n        for (let col = 0; col < n; col ++) {\r\n            board_row.push(<Square value={squares[row*n + col]} onSquareClick={()=>handleClick(row*n + col)}/>)\r\n        }\r\n        board.push(<div className=\"board-row\">{board_row}</div>);\r\n    }\r\n    return (\r\n      <>\r\n        <h3>Caro chess</h3>\r\n        <p>Rule: each player alternates, whoever gets to 5 in a row, or column or diagonal first wins.</p>\r\n        <div className=\"status\">{status};</div>\r\n        {board}\r\n      </>\r\n    );\r\n  }\r\n    \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}