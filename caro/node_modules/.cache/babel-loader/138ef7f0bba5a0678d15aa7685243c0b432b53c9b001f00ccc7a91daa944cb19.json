{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitadm\\\\Documents\\\\htmls\\\\caro\\\\caro\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport Square from \"./Square\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const m = 2,\n    n = 3;\n  const numConsecutiveToWin = 2;\n  const [squares, setSquares] = useState(Array(m * n).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [latestPos, setLatestPos] = useState(null);\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setLatestPos(i);\n  }\n  function posToRowCol(pos) {\n    return [parseInt(pos / n), pos % n];\n  }\n  function rowColToPos(row, col) {\n    return row * n + col;\n  }\n  function calculateWinner() {\n    const [row, col] = posToRowCol(latestPos);\n    const latestSymbol = xIsNext ? \"O\" : \"X\";\n    console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\n    // check vertical\n    var leftRow = row,\n      rightRow = row;\n    while (leftRow >= 0 & squares[rowColToPos(leftRow, col)] === latestSymbol) {\n      leftRow--;\n      console.log(\"leftRow\" + leftRow);\n    }\n    while (rightRow <= m & squares[rowColToPos(rightRow, col)] === latestSymbol) {\n      rightRow++;\n    }\n    if (upperCol - lowerCol >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n    // check horizontal\n    var upperCol = col,\n      lowerCol = col;\n    while (squares[rowColToPos(row, upperCol)] === latestSymbol) {\n      upperCol++;\n    }\n    while (squares[rowColToPos(row, lowerCol)] === latestSymbol) {\n      lowerCol--;\n    }\n    if (rightRow - leftRow >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n    // checking upright diagonal\n    var diagonalMoveUp = 0,\n      diagonalMoveDown = 0;\n    while (squares[rowColToPos(row + diagonalMoveUp, col + diagonalMoveUp)] === latestSymbol) {\n      diagonalMoveUp++;\n    }\n    while (squares[rowColToPos(row + diagonalMoveDown, col + diagonalMoveDown)] === latestSymbol) {\n      diagonalMoveDown--;\n    }\n    if (diagonalMoveUp + diagonalMoveDown >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n    // check upleft diagonal\n    diagonalMoveUp = 0;\n    diagonalMoveDown = 0;\n    while (squares[rowColToPos(row + diagonalMoveUp, col - diagonalMoveUp)] === latestSymbol) {\n      diagonalMoveUp++;\n    }\n    while (squares[rowColToPos(row + diagonalMoveDown, col - diagonalMoveDown)] === latestSymbol) {\n      diagonalMoveDown--;\n    }\n    if (diagonalMoveUp + diagonalMoveDown >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n    return null;\n  }\n  const winner = calculateWinner();\n  // const winner = null; //TODO\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  const board = [];\n  for (let row = 0; row < m; row++) {\n    let board_row = [];\n    for (let col = 0; col < n; col++) {\n      board_row.push( /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[row * n + col],\n        onSquareClick: () => handleClick(row * n + col)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 28\n      }, this));\n    }\n    board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: board_row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 20\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [status, \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), board]\n  }, void 0, true);\n}\n_s(Board, \"lqEJu6JOKvNtPrgS0sBvsOLxlJI=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Square","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","m","n","numConsecutiveToWin","squares","setSquares","Array","fill","xIsNext","setXIsNext","latestPos","setLatestPos","handleClick","i","calculateWinner","nextSquares","slice","posToRowCol","pos","parseInt","rowColToPos","row","col","latestSymbol","console","log","leftRow","rightRow","upperCol","lowerCol","diagonalMoveUp","diagonalMoveDown","winner","status","board","board_row","push","value","onSquareClick","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/mitadm/Documents/htmls/caro/caro/src/Board.js"],"sourcesContent":["import Square from \"./Square\";\r\nimport { useState } from 'react';\r\n\r\nexport default function Board() {\r\n    const m=2, n=3;\r\n    const numConsecutiveToWin=2;\r\n    const [squares, setSquares] = useState(Array(m*n).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [latestPos, setLatestPos] = useState(null);\r\n\r\n    function handleClick(i) {\r\n      if (squares[i] || calculateWinner(squares)) {\r\n        return;\r\n      }\r\n      const nextSquares = squares.slice();\r\n      if (xIsNext) {\r\n        nextSquares[i] = \"X\";\r\n      } else {\r\n        nextSquares[i] = \"O\";\r\n      }\r\n      setSquares(nextSquares);\r\n      setXIsNext(!xIsNext);\r\n      setLatestPos(i);\r\n    }\r\n    function posToRowCol(pos){\r\n        return [parseInt(pos/n), pos %n];\r\n    }\r\n    function rowColToPos(row, col){\r\n        return row*n+col;\r\n    }\r\n    function calculateWinner(){\r\n        const [row, col] = posToRowCol(latestPos);\r\n        const latestSymbol = xIsNext? \"O\": \"X\";\r\n        console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\r\n        // check vertical\r\n        var leftRow=row, rightRow=row;\r\n        while ((leftRow>=0)&(squares[rowColToPos(leftRow, col)]===latestSymbol)) {leftRow--; console.log(\"leftRow\" + leftRow);}\r\n        while ((rightRow<=m)&(squares[rowColToPos(rightRow, col)]===latestSymbol)) {rightRow++;}\r\n        if (upperCol - lowerCol>=numConsecutiveToWin){return latestSymbol;}\r\n        // check horizontal\r\n        var upperCol=col, lowerCol=col;\r\n        while (squares[rowColToPos(row, upperCol)]===latestSymbol) {upperCol++;}\r\n        while (squares[rowColToPos(row, lowerCol)]===latestSymbol) {lowerCol--;}\r\n        if (rightRow - leftRow>=numConsecutiveToWin){return latestSymbol;}\r\n        // checking upright diagonal\r\n        var diagonalMoveUp=0, diagonalMoveDown=0;\r\n        while (squares[rowColToPos(row+diagonalMoveUp, col+diagonalMoveUp)]===latestSymbol) {diagonalMoveUp++;}\r\n        while (squares[rowColToPos(row+diagonalMoveDown, col+diagonalMoveDown)]===latestSymbol) {diagonalMoveDown--;}\r\n        if (diagonalMoveUp + diagonalMoveDown>=numConsecutiveToWin) {return latestSymbol;}\r\n        // check upleft diagonal\r\n        diagonalMoveUp=0; \r\n        diagonalMoveDown=0;\r\n        while (squares[rowColToPos(row+diagonalMoveUp, col-diagonalMoveUp)]===latestSymbol) {diagonalMoveUp++;}\r\n        while (squares[rowColToPos(row+diagonalMoveDown, col-diagonalMoveDown)]===latestSymbol) {diagonalMoveDown--;}\r\n        if (diagonalMoveUp + diagonalMoveDown>=numConsecutiveToWin) {return latestSymbol;}\r\n        return null;\r\n    }\r\n\r\n    const winner = calculateWinner();\r\n    // const winner = null; //TODO\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    const board = []\r\n    for (let row = 0; row < m; row ++) {\r\n        let board_row = [];\r\n        for (let col = 0; col < n; col ++) {\r\n            board_row.push(<Square value={squares[row*n + col]} onSquareClick={()=>handleClick(row*n + col)}/>)\r\n        }\r\n        board.push(<div className=\"board-row\">{board_row}</div>);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"status\">{status};</div>\r\n        {board}\r\n      </>\r\n    );\r\n  }\r\n    \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}