{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitadm\\\\Documents\\\\htmls\\\\caro\\\\caro\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport Square from \"./Square\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const m = 2,\n    n = 3;\n  const numConsecutiveToWin = 3;\n  const [squares, setSquares] = useState(Array(m * n).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [latestPos, setLatestPos] = useState(null);\n  const winner = calculateWinner();\n  function handleClick(i) {\n    if (squares[i] || winner) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setLatestPos(i);\n  }\n  function posToRowCol(pos) {\n    return [parseInt(pos / n), pos % n];\n  }\n  function rowColToPos(row, col) {\n    return row * n + col;\n  }\n  function calculateWinner() {\n    const [row, col] = posToRowCol(latestPos);\n    const latestSymbol = xIsNext ? \"O\" : \"X\";\n    console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\n\n    // check vertical\n    var leftRow = row,\n      rightRow = row;\n    while (leftRow >= 0 & squares[rowColToPos(leftRow, col)] === latestSymbol) {\n      leftRow--;\n    }\n    while (rightRow <= n - 1 & squares[rowColToPos(rightRow, col)] === latestSymbol) {\n      rightRow++;\n    }\n    leftRow = Math.max(0, leftRow);\n    rightRow = Math.min(n - 1, rightRow);\n    console.log(`leftrow=${leftRow}, rightrow=${rightRow}`);\n    if (rightRow - leftRow + 1 >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n\n    // check horizontal\n    var upperCol = col,\n      lowerCol = col;\n    while (upperCol >= 0 & squares[rowColToPos(row, upperCol)] === latestSymbol) {\n      upperCol--;\n    }\n    while (lowerCol <= m - 1 & squares[rowColToPos(row, lowerCol)] === latestSymbol) {\n      lowerCol++;\n    }\n    upperCol = Math.max(0, upperCol);\n    lowerCol = Math.min(m - 1, lowerCol);\n    if (lowerCol - upperCol >= numConsecutiveToWin) {\n      return latestSymbol;\n    }\n\n    // checking upright diagonal        \n    // leftRow=row;\n    // rightRow=row;\n    // upperCol=col;\n    // lowerCol=col;\n    // while ((leftRow>=0)&(upperCol>=0)&(squares[rowColToPos(leftRow, upperCol)]===latestSymbol)) {\n    //     leftRow--; \n    //     upperCol--;\n    // }\n    // while ((rightRow<=n-1)&(lowerCol<=m-1)&(squares[rowColToPos(rightRow, lowerCol)]===latestSymbol)) {\n    //     rightRow++; \n    //     lowerCol--;\n    // }\n    // leftRow = Math.max(0, leftRow);\n    // rightRow = Math.min(n-1, rightRow);\n\n    // if (diagonalMoveUp + diagonalMoveDown>=numConsecutiveToWin) {return latestSymbol;}\n\n    return null;\n  }\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  const board = [];\n  for (let row = 0; row < m; row++) {\n    let board_row = [];\n    for (let col = 0; col < n; col++) {\n      board_row.push( /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[row * n + col],\n        onSquareClick: () => handleClick(row * n + col)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 28\n      }, this));\n    }\n    board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: board_row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 20\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [status, \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), board]\n  }, void 0, true);\n}\n_s(Board, \"lqEJu6JOKvNtPrgS0sBvsOLxlJI=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Square","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","m","n","numConsecutiveToWin","squares","setSquares","Array","fill","xIsNext","setXIsNext","latestPos","setLatestPos","winner","calculateWinner","handleClick","i","nextSquares","slice","posToRowCol","pos","parseInt","rowColToPos","row","col","latestSymbol","console","log","leftRow","rightRow","Math","max","min","upperCol","lowerCol","status","board","board_row","push","value","onSquareClick","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/mitadm/Documents/htmls/caro/caro/src/Board.js"],"sourcesContent":["import Square from \"./Square\";\r\nimport { useState } from 'react';\r\n\r\nexport default function Board() {\r\n    const m=2, n=3;\r\n    const numConsecutiveToWin=3;\r\n    const [squares, setSquares] = useState(Array(m*n).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [latestPos, setLatestPos] = useState(null);\r\n\r\n    const winner = calculateWinner();\r\n\r\n    function handleClick(i) {\r\n      if (squares[i] || winner) {\r\n        return;\r\n      }\r\n      const nextSquares = squares.slice();\r\n      if (xIsNext) {\r\n        nextSquares[i] = \"X\";\r\n      } else {\r\n        nextSquares[i] = \"O\";\r\n      }\r\n      setSquares(nextSquares);\r\n      setXIsNext(!xIsNext);\r\n      setLatestPos(i);\r\n    }\r\n    function posToRowCol(pos){\r\n        return [parseInt(pos/n), pos %n];\r\n    }\r\n    function rowColToPos(row, col){\r\n        return row*n+col;\r\n    }\r\n    function calculateWinner(){\r\n        const [row, col] = posToRowCol(latestPos);\r\n        const latestSymbol = xIsNext? \"O\": \"X\";\r\n        console.log(`Current pos is ${latestPos}, row is ${row} col is ${col}, latest symbol is ${latestSymbol}`);\r\n\r\n        // check vertical\r\n        var leftRow=row, rightRow=row;\r\n        while ((leftRow>=0)&(squares[rowColToPos(leftRow, col)]===latestSymbol)) {leftRow--;}\r\n        while ((rightRow<=n-1)&(squares[rowColToPos(rightRow, col)]===latestSymbol)) {rightRow++;}\r\n        leftRow = Math.max(0, leftRow);\r\n        rightRow = Math.min(n-1, rightRow);\r\n        console.log(`leftrow=${leftRow}, rightrow=${rightRow}`);\r\n        if (rightRow - leftRow+1>=numConsecutiveToWin){return latestSymbol;}\r\n\r\n        // check horizontal\r\n        var upperCol=col, lowerCol=col;\r\n        while ((upperCol>=0)&(squares[rowColToPos(row, upperCol)]===latestSymbol)) {upperCol--;}\r\n        while ((lowerCol<=m-1)&(squares[rowColToPos(row, lowerCol)]===latestSymbol)) {lowerCol++;}\r\n        upperCol = Math.max(0, upperCol);\r\n        lowerCol = Math.min(m-1, lowerCol);\r\n        if (lowerCol - upperCol>=numConsecutiveToWin){return latestSymbol;}\r\n\r\n        // checking upright diagonal        \r\n        // leftRow=row;\r\n        // rightRow=row;\r\n        // upperCol=col;\r\n        // lowerCol=col;\r\n        // while ((leftRow>=0)&(upperCol>=0)&(squares[rowColToPos(leftRow, upperCol)]===latestSymbol)) {\r\n        //     leftRow--; \r\n        //     upperCol--;\r\n        // }\r\n        // while ((rightRow<=n-1)&(lowerCol<=m-1)&(squares[rowColToPos(rightRow, lowerCol)]===latestSymbol)) {\r\n        //     rightRow++; \r\n        //     lowerCol--;\r\n        // }\r\n        // leftRow = Math.max(0, leftRow);\r\n        // rightRow = Math.min(n-1, rightRow);\r\n\r\n        // if (diagonalMoveUp + diagonalMoveDown>=numConsecutiveToWin) {return latestSymbol;}\r\n        \r\n        \r\n        return null;\r\n    }\r\n    \r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    const board = []\r\n    for (let row = 0; row < m; row ++) {\r\n        let board_row = [];\r\n        for (let col = 0; col < n; col ++) {\r\n            board_row.push(<Square value={squares[row*n + col]} onSquareClick={()=>handleClick(row*n + col)}/>)\r\n        }\r\n        board.push(<div className=\"board-row\">{board_row}</div>);\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"status\">{status};</div>\r\n        {board}\r\n      </>\r\n    );\r\n  }\r\n    \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}